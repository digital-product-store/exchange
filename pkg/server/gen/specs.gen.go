// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ExchangeResult defines model for ExchangeResult.
type ExchangeResult struct {
	Total float32 `json:"total"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /_health)
	Health(ctx echo.Context) error

	// (GET /_private/api/v1/{from}/{to}/{amount})
	Exchange(ctx echo.Context, from string, to string, amount float32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Health(ctx)
	return err
}

// Exchange converts echo context to params.
func (w *ServerInterfaceWrapper) Exchange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "from" -------------
	var from string

	err = runtime.BindStyledParameterWithLocation("simple", false, "from", runtime.ParamLocationPath, ctx.Param("from"), &from)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Path parameter "to" -------------
	var to string

	err = runtime.BindStyledParameterWithLocation("simple", false, "to", runtime.ParamLocationPath, ctx.Param("to"), &to)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Path parameter "amount" -------------
	var amount float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "amount", runtime.ParamLocationPath, ctx.Param("amount"), &amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Exchange(ctx, from, to, amount)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/_health", wrapper.Health)
	router.GET(baseURL+"/_private/api/v1/:from/:to/:amount", wrapper.Exchange)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RUwW7bMAz9FYPb0Yjdtbv4tB0GrLdiPQ5Bocp0rM4WNYrOFhj+94GynTZp1w7YqapM",
	"6vE9vpcRLPWBPHqJUI0QbYu9Sccvv21r/A6/YRw60ZvAFJDFYfouJKbTQ0PcG4EKmo6MQA5yCAgV+KG/",
	"R4ZpyoHx5+AYa6i+L33bYxndP6AVmLTO+Yb0SUtejE2g2BvXQQX3hl38VON+05E1HUw51BgtuyCOPFRw",
	"w25vBLOIvHcWsxa7ELMDDRkuTPQfzuzAjN4qixzESadDrGSz26X788015LBHjvPr5eZiUyooBfQmOKjg",
	"clNuLiGHYKRNihR3LZpOWj3vME2vghkd8LqGCr7On1WPGMjHWcgPZal/TtmsLFzMfhH/cH6XzfJ3B53i",
	"Y3n5ao8neaFvykHMLuoWlkm3elfchVm7wgRX7C+KsWHqp2IUmorR9DR4mf5KapUuKcGmR0FWiPPp9M1V",
	"/APorqFK2kEO3vS4lMBTtwgPmC+mTJ6bLROFnd8pn3MQoTcghP4PYFYjcz77Bz5z8auAb4Zn+7JbNCHo",
	"0zpMCJ2zaSHFQ9QpxycA7xkbqOBd8Rj0Ykl5cRbxFMFTusfo8FKSw1V59dx6qw7JeA0Nvj5x2+Ivtdvj",
	"7fkbt8fgqjWdxxgfpVz8+nwha+zR14Gc/owde1bUaTv9CQAA///No8666AQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
